#!/usr/bin/env bash
#
# birch - a simple irc client in bash

esc() {
    case $1 in
        cursor_show):  "\\e[?25h"      ;;
        cursor_hide):  "\\e[?25l"      ;;
        cursor_save):  "\\e7"          ;;
        cursor_load):  "\\e8"          ;;
        cursor_move):  "\\e[$2;$3H"    ;;
        cursor_fake):  "\\e[47m \\e[m" ;;
        clear_screen): "\\e[2J"        ;;
        clear_line):   "\\e[K"         ;;
        scroll_area):  "\\e[$2;$3r"    ;;

        *) return
    esac

    printf %b "$_"
}

clean() {
    term_reset
    rm -f "$temp_dir/birch-$pid-"*
    kill 0
}

hist_focus() {
    : >> "$temp_dir/birch-$pid-$chan"
    ln -sf "$temp_dir/birch-$pid-$chan" "$temp_dir/birch-$pid--current"
}

term_setup() {
    esc cursor_hide
    esc clear_screen
    esc scroll_area 1 "$((LINES - 1))"

    stty -echo 2>/dev/null
}

term_reset() {
    esc clear_screen
    esc scroll_area
    esc cursor_show

    stty echo 2>/dev/null

    exec 69>&-
}

term_size() {
    resize=

    shopt -s checkwinsize; (:;:)
}

ignore_list_save(){
    local chan="$1" msg="$2"

    # source ignoreList ot be sure to have all entry's
    # XXX: shellcheck try's to follow, just ignore
    # shellcheck disable=SC1090
    source "$temp_dir/birch-$pid-ignorelist"    

    # export ignoreList to file to be reused in irc_output
    ignore["$chan"]="$msg"
    declare -p ignore > "$temp_dir/birch-$pid-ignorelist"
}

ignore_list_parse(){
    local chan="$1" msg="$2"

    # source ignoreList
    # XXX: shellcheck try's to follow, just ignore
    # shellcheck disable=SC1090
    source "$temp_dir/birch-$pid-ignorelist"

    # check if key exist. Key should be the channel name
    # if it does not exist then we should return 0 so the message will be displayed
    if [[ -z "${ignore["$chan"]}" ]]; then
        return 0
    else
        # if the messages matches the pattern then we should return 1 so the message will not be displayed
        [[ "$msg" =~ ${ignore["$chan"]} ]] && return 1
        return 0
    fi
}

irc_setup() {
    exec 69<>"/dev/tcp/${host:=irc.freenode.net}/${port:-6667}" || {
        printf '%s\n' "error: Couldn't connect to $host." >&2
        exit 1
    }

    IFS=, read -ra channels <<< "${chan:=#kisslinux}"
    chan=${channels[0]}

    printf 'NICK %s\n' "${nick:=$USER}" >&69
    printf 'USER %s - - :%s\n' "$nick" "$nick" >&69
    printf 'PASS %s\n' "${pass:-}" >&69
    printf 'JOIN %s\n' "${channels[@]}" >&69

    hist_focus

    msg_hist=("")
}

irc_parse() {
    mesg=${1#* :}
    www=${1%%$mesg*}

    read -ra args <<< "${www##:}"
    IFS='!@' read -r unick _ _ <<< "${args[0]}"
}

irc_print() {
    if [[ $2 == \#* && "$2" != "$chan" ]]; then
        printf '%s\n' "$1" >> "$temp_dir/birch-$pid-$2"

        [[ " ${channels[*]} " != *" $chan "* ]] &&
            channels+=("$chan")

    else
        if ignore_list_parse "$chan" "$1"; then
            printf '\r%s\n' "$1"
            printf '%s\n' "$1" >> "$temp_dir/birch-$pid--current"
        fi
    fi
}

irc_input() {
    esc cursor_save
    esc cursor_move "$LINES"
    esc clear_line

    printf %s "$chan (${cch:=0}/$((${#channels[@]}-1))) > $msg"

    esc cursor_fake
    esc cursor_load

    IFS= read -rsn 1 -t 0.1 &&
        case $REPLY in
            $'\177'|$'\b')
                msg=${msg%?}
                unset h c comp
            ;;

            "")
                irc_cmd "$msg"
                msg_hist+=("$msg")
                unset msg h c comp
            ;;

            $'\016'|$'\020')
                case $REPLY in
                    $'\016') ((cch=cch + 1 <= ${#channels[@]}-1 ? ++cch : 0)) ;;
                    $'\020') ((cch=cch - 1 >= 0 ? --cch : ${#channels[@]}-1)) ;;
                esac

                chan=${channels[cch]}
                resize=1

                hist_focus
            ;;

            $'\t')
                word=${msg##* }
                word=${word%% *}
                comp_type=${word:0:1}

                case $comp_type in
                    \#) comp_list=${channels[*]} ;;
                    /)  comp_list="/join /leave /me /msg /quit /nick" ;;
                    *)  return ;;
                esac

                [[ ${comp[0]} ]] ||
                    mapfile -t comp < <(compgen -W "$comp_list" "$word")

                [[ ${comp[c]} ]] && {
                    msg=${msg%%"$word"}${comp[c]}
                    ((c=c >= ${#comp[@]}-1 ? 0 : ++c))
                }
            ;;

            $'\e') esc=1 ;;

            *)
                [[ $esc == 1 ]] && {
                    [[ $REPLY == \[ ]] &&
                        return

                    [[ $REPLY == A && ${h:=0} != "${#msg_hist[@]}" ]] &&
                        msg=${msg_hist[-++h]}

                    [[ $REPLY == B && ${h:=0} != 0 ]] &&
                        msg=${msg_hist[---h]}

                    esc=
                    return
                }

                msg+=$REPLY
                unset comp c h
            ;;
        esac
}

irc_cmd() {
    read -ra cmd <<< "$1"

    case $1 in
        "") ;;

        /j*)
            printf 'JOIN %s\n'  "${cmd[1]}" >&69
            printf 'NAMES %s\n' "${cmd[1]}" >&69

            chan=$_
            resize=1

            [[ " ${channels[*]} " != *" $chan "* ]] &&
                channels+=("$chan")

            hist_focus
        ;;

        /l*)
            printf 'PART %s\n' "${cmd[1]:-$chan}" >&69
        ;;

        /me*)
            printf 'PRIVMSG %s :\001ACTION %s\001\n' "$chan" "${cmd[*]:1}" >&69

            printf -v out '%10s \e[1;3%sm%s\e[m %s' \
                "*" "$((${#nick}/2))" "$nick" "${cmd[*]:1}"

            irc_print "$out" "$chan"
        ;;

        /m*)
            printf 'PRIVMSG %s :%s\n' "${cmd[1]}" "${cmd[*]:2}" >&69
        ;;

        /n*)
            printf 'NICK %s\n' "${cmd[1]}" >&69
            nick=$_
        ;;

        /q*)
            printf 'QUIT :%s\n' "${cmd[1]}" >&69
            exit
        ;;

        /i*)
            ignore_list_save "$chan" "${cmd[*]:1}"
        ;;

        /*)
            printf '%s\n' "error: ${cmd[0]} not implemented yet."
        ;;

        *)
            printf 'PRIVMSG %s %s\n' "$chan" ":$1" >&69

            printf -v out '\e[1;3%sm%10s\e[m %s' \
                "$((${#nick}/2))" "${nick:0:10}" "$1"

            irc_print "$out" "$chan"
        ;;
    esac
}

irc_output() {
    while read -sru 69 || :; do
        REPLY=${REPLY%%$'\r'*}

        case $REPLY in
            PING*)
                printf 'PONG%s\n' "${REPLY##PING}" >&69
            ;;

            *PRIVMSG*)
                irc_parse "$REPLY"

                [[ $mesg == *$nick* ]] &&
                    mesg=${mesg//$nick/$'\e[1;3'$((${#unick}/2))m$nick$'\e[m'}

                case $REPLY in
                    *$'\001ACTION'*$'\001'*)
                        mesg=${mesg/$'\001ACTION'}

                        printf -v out '%10s \e[1;3%sm%s\e[m %s' \
                            "*" "$((${#unick}/2))" "$unick" "${mesg/$'\001'}"

                        irc_print "$out" "${args[2]}"
                    ;;

                    *)
                        printf -v out '\e[1;3%sm%10s\e[m %s' \
                            "$((${#unick}/2))" "${unick:0:10}" "$mesg"

                        irc_print "$out" "${args[2]}"
                    ;;
                esac
            ;;

            *JOIN*|*PART*|*QUIT*)
                REPLY=${REPLY:1}
                unick=${REPLY%%\!*}

                case $REPLY in
                    *JOIN*): '-->joined' ;;
                    *PART*): '<--left'   ;;
                    *QUIT*): '<--quit'   ;;
                esac

                printf -v out '%10s \e[1;3%sm%s\e[m %s \e[1m%s\e[m' \
                    "${_::3}" "$((${#unick}/2))" "$unick" \
                    "has ${_:3}" "#${REPLY##*\#}"

                irc_print "$out" "#${REPLY##*\#}"
            ;;

            *NOTICE*)
                irc_print "${REPLY##*NOTICE }" "$chan"
            ;;

            *NICK*)
                irc_parse "$REPLY"

                printf -v out '%10s %s\n' "--" \
                    "$unick is now known as $mesg"

                irc_print "$out" "$chan"
            ;;

            *353*)
                chan=\#${REPLY##*\#}
                chan=${chan/ *}
            ;;

            *366*) ;;

            *)
                [[ $REPLY == *376* && $comm ]] && irc_cmd "$comm"

                irc_print "$REPLY" "$chan"
            ;;
        esac
    done
}

get_args() {
    while getopts :s:u:p:c:x:P:v opt; do
        case $opt in
            s)  host=$OPTARG ;;
            u)  nick=$OPTARG ;;
            p)  pass=$OPTARG ;;
            P)  port=$OPTARG ;;
            c)  chan=$OPTARG ;;
            x)  comm=$OPTARG ;;

            \?) usage ;;

            v)
                printf '%s\n' "$version"
                exit
            ;;

            :)
                printf 'Option -%s requires an argument.\n' "$OPTARG" >&2
                exit 1
            ;;
        esac
    done
}

usage() {
    printf 'usage: birch [-s host -u nick -p pass -P port -c channel]\n'
    exit 1
}


main() {
    pid=$$
    version='birch 0.0.1'

    get_args "$@"
    term_size

    : > "${temp_dir:=/tmp}/birch-$pid--current"

    # create associative array and file for ignore list
    # XXX: declare -g could probably be avoided with bash5+ and shopt -s localvar_inherit
    declare -gA ignore
    : > "${temp_dir:=/tmp}/birch-$pid-ignorelist"

    irc_setup
    term_setup

    trap clean    INT EXIT
    trap resize=1 WINCH

    irc_output &

    for ((;;)) {
        irc_input

        [[ $resize ]] && {
            term_size
            term_setup

            printf '%s\n' "$(< "$temp_dir/birch-$pid--current")"
        }
    }

    wait
    return 0
}

main "$@"
